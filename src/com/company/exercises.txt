// 25 mins.
Create a class called person:
It should have the following properties:
- firstName
- lastName
- age

Encapsulate the person class such that once an instance of it is created
it cannot be changed but values can be read from it. i.e read-only

Create another class called Employee:
It should have the following properties:
 - occupation
 - employeeId


// 30 mins.
Ensure that the Employee class is a child class to the Person class.

Create an abstract class called Shape, and give it two abstract methods
- getArea
- getPerimeter


Create 3 subclasses from Shape class respectively: Circle, Square and Rectangle

Use a class with a main method to demonstrate the abstraction between shape and its child classes
as well as the operations of the getArea and getPerimeter methods


45 mins.
Create an abstract class called Account and add the following properties:
- balance (double)
- accountNumber(string)

behaviours:
- deposit()
- withdraw()
- getBalance()
- getAccountNo()

Create 2 classes called CheckingAccount and SavingsAccount
The SavingsAccount should come with the following Extra features
 - interestRate

 additional behaviour:
 - setInterestRate


 Create a class called Bank, and it should come with the following properties:
 - accounts(An array of Account objects)
 - numOfAccounts(counter to track how many account have been created)

 behaviours:
 - addAccount(Account account)
 - findAccount(String accountNumber)
 - deposit(String accountNumber)
 - withdraw(String accountNumber)
 - getBalance(String accountNumber)

 HINT: For deposit(), withdraw() and getBalance() in the Bank class, you can use
 the findAccount method as a helper method





// 35 mins
Create a class called Person with the following properties
- firstName
- lastName
- age

Create a class called Employee as a subclass to the
Person class with props:
- occupation
- salary
- employeeId

Create a class called Company with the following properties
- companyName
- List<Employee> employees

Under the company class, implement the averageSalary()
method that will return the average salary of the employees
in a particular instance of a company object.

Bonus: When testing in your main method, you can use the
scanner to create the employees if you prefer.